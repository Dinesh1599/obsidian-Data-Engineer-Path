{
	"nodes":[
		{"id":"a80c1e19841740be","x":-352,"y":-780,"width":1421,"height":480,"type":"group","label":"Data Cleaning"},
		{"id":"4e8571b128edcd3d","x":-352,"y":-1280,"width":1421,"height":415,"type":"group","label":"Data preprocessing"},
		{"id":"fc77e61362f0a6e6","type":"group","x":-340,"y":-1600,"width":1439,"height":252,"label":"File import method"},
		{"id":"fc5e32ce5468478b","type":"text","text":"#\n# JSON file\ndf = pd.read_json(\"data.json\")\n\n# JSON from URL\ndf = pd.read_json(\"https://api.example.com/data.json\")\n","x":239,"y":-1580,"width":264,"height":212},
		{"id":"f28947a1949d4138","type":"text","text":"# Parquet File\n\ndf = pd.read_parquet(\"data.parquet\")","x":529,"y":-1580,"width":250,"height":212},
		{"id":"366ab8bcc8a55ee8","type":"text","text":"Database\n\nimport sqlite3\n\n# Connect to SQLite\nconn = sqlite3.connect(\"database.db\")\n\n# Read from a table\ndf = pd.read_sql(\"SELECT * FROM my_table\", conn)\n","x":799,"y":-1580,"width":280,"height":212},
		{"id":"54d7738a79627da0","type":"text","text":"# Basic CSV\ndf = pd.read_csv(\"data.csv\")\n\n# With custom delimiter\ndf = pd.read_csv(\"data.csv\", sep=\";\")\n\n# Read from a URL\ndf = pd.read_csv(\"https://people.sc.fsu.edu/~jburkardt/data/csv/airtravel.csv\")","x":-320,"y":-1580,"width":259,"height":212},
		{"id":"bcb6cc2dfb4c77e5","type":"text","text":"# Excel File\n\ndf = pd.read_excel(\"data.xlsx\", sheet_name=\"Sheet1\")","x":-41,"y":-1580,"width":260,"height":212},
		{"id":"59b75979adbd2bb8","type":"text","text":"import pandas as pd\nimport numpy as np","x":254,"y":-1700,"width":250,"height":60},
		{"id":"2bd147b5eb23ca18","type":"text","text":"## Data info\ndf.info()\ndf.describe()","x":-42,"y":-1280,"width":250,"height":113},
		{"id":"f84ca75398bcec72","type":"text","text":"selecting particular dtypes\neg:\nnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeric_df = df.select_dtypes(include=numerics)","x":218,"y":-1280,"width":285,"height":113},
		{"id":"d9b9ff15001a29cd","type":"text","text":"Null Value\ndf.isnull\n\nto count no of missing values for each column\ndf.isnull().sum()","x":528,"y":-1280,"width":250,"height":113},
		{"id":"ae21fcaaf2fb3686","x":798,"y":-1280,"width":250,"height":113,"type":"text","text":"Unique Values\ndf['variable_name'].unique()"},
		{"id":"25f0cc5f31b58bbb","type":"text","text":"# Columns\n\n1. Columns\n\t1. df.columns()\n2. length of columns\n\t1. len(df.columns)\n3. ","x":-333,"y":-1280,"width":271,"height":113},
		{"id":"3e04baffe76d9b0a","x":-333,"y":-1140,"width":421,"height":255,"type":"text","text":"Replace Data\nTo replace special characters(say here ‘?’) from the data if resulting in noise or incorrect information\n\tdf[‘variable_name1’]=df[‘variable_name1’].replace(‘?’, np.NaN)\n\nTo change the datatype to float \n\tdf[‘variable_name1’]=df[‘variable_name1’]. astype(‘float64’)"},
		{"id":"8bdafa5bb5c0b971","x":114,"y":-1140,"width":250,"height":161,"type":"text","text":"To check the the complete row as per location df.iloc[location number]"},
		{"id":"ef7821a68a875009","x":494,"y":-760,"width":401,"height":362,"type":"text","text":"detect and remove Duplicates\n\n- **Detect Duplicates:**\n    \n    - `df.duplicated().sum()` (entire row duplicates)\n        \n    - `df.duplicated(subset=['col1', 'col2']).sum()` (key columns)\n        \n- **Action:**\n    \n    - `df.drop_duplicates(inplace=True)`"},
		{"id":"3606e41ac791f639","x":-22,"y":-760,"width":421,"height":320,"type":"text","text":"For Numerical\n\nImputation using mean() incase no outliers are present df.variable_name1=df.variable_name1.fillna (df.variable_name1.mean())"},
		{"id":"ee4841002fdcf09b","x":-340,"y":-760,"width":280,"height":320,"type":"text","text":"IF missing values\n**Drop:** `df.dropna()`\n\n- Numerical: Mean/median (`df.fillna(df['col'].mean())`)\n    \n- Categorical: Mode (`df.fillna(df['col'].mode()[0])`)\n\n"},
		{"id":"765ae1d8ce85e81b","x":-81,"y":-200,"width":843,"height":360,"type":"text","text":"| Variable type | Plot          | What it shows         | Code snippet                                                                                                                                                                                      |\n| ------------- | ------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Numeric       | Histogram     | Distribution & skew   | `python\\nimport matplotlib.pyplot as plt\\ns = df['col']\\ns.plot(kind='hist', bins=30)\\nplt.xlabel('col'); plt.ylabel('count'); plt.title('Histogram of col'); plt.show()\\n`                       |\n| Numeric       | KDE (density) | Smoothed distribution | `python\\nimport matplotlib.pyplot as plt\\ns = df['col']\\ns.plot(kind='kde')\\nplt.xlabel('col'); plt.title('Density of col'); plt.show()\\n`                                                        |\n| Numeric       | Boxplot       | Median, IQR, outliers | `python\\nimport matplotlib.pyplot as plt\\nplt.boxplot(df['col'].dropna(), vert=True)\\nplt.ylabel('col'); plt.title('Boxplot of col'); plt.show()\\n`                                               |\n| Categorical   | Bar chart     | Counts per category   | `python\\nimport matplotlib.pyplot as plt\\ncounts = df['cat_col'].value_counts()\\ncounts.plot(kind='bar')\\nplt.xlabel('cat_col'); plt.ylabel('count'); plt.title('Category counts'); plt.show()\\n` |\n"},
		{"id":"316d26379343443b","x":-207,"y":200,"width":1095,"height":727,"type":"text","text":"| Variable types             | Plot              | What it shows             | Code snippet                                                                                                                                                                                                                                                                                                                                                     |\n| -------------------------- | ----------------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Numeric vs Numeric         | Scatter           | Relationship/correlation  | `python\\nimport matplotlib.pyplot as plt\\nx, y = df['x'], df['y']\\nplt.scatter(x, y)\\nplt.xlabel('x'); plt.ylabel('y'); plt.title('x vs y'); plt.show()\\n`                                                                                                                                                                                                       |\n| Numeric vs Numeric         | 2D hist/hexbin    | Density of points         | `python\\nimport matplotlib.pyplot as plt\\nx, y = df['x'], df['y']\\nplt.hist2d(x, y, bins=30)\\nplt.xlabel('x'); plt.ylabel('y'); plt.title('2D histogram'); plt.colorbar(); plt.show()\\n`                                                                                                                                                                         |\n| Time vs Numeric            | Line plot         | Trend over time           | `python\\nimport matplotlib.pyplot as plt\\ns = df.set_index('date')['value'].sort_index()\\ns.plot()\\nplt.xlabel('date'); plt.ylabel('value'); plt.title('Time series'); plt.show()\\n`                                                                                                                                                                             |\n| Categorical vs Numeric     | Grouped boxplot   | Distribution by group     | `python\\nimport matplotlib.pyplot as plt\\n# build a list of arrays per category\\ncats = df['cat'].dropna().unique()\\ndata = [df.loc[df['cat']==c, 'val'].dropna() for c in cats]\\nplt.boxplot(data, labels=cats)\\nplt.xlabel('cat'); plt.ylabel('val'); plt.title('val by cat'); plt.show()\\n`                                                                   |\n| Categorical vs Numeric     | Aggregated bar    | Mean (or sum) by category | `python\\nimport matplotlib.pyplot as plt\\nagg = df.groupby('cat')['val'].mean().sort_values()\\nagg.plot(kind='bar')\\nplt.xlabel('cat'); plt.ylabel('mean(val)'); plt.title('Mean val by cat'); plt.show()\\n`                                                                                                                                                     |\n| Categorical vs Categorical | Heatmap of counts | Contingency table         | `python\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\nct = pd.crosstab(df['cat1'], df['cat2'])\\nplt.imshow(ct.values, aspect='auto')\\nplt.xticks(ticks=range(ct.shape[1]), labels=ct.columns, rotation=90)\\nplt.yticks(ticks=range(ct.shape[0]), labels=ct.index)\\nplt.title('cat1 vs cat2 (counts)'); plt.colorbar(); plt.tight_layout(); plt.show()\\n` |\n"}
	],
	"edges":[
		{"id":"22245b3ceeddb32c","fromNode":"59b75979adbd2bb8","fromSide":"bottom","toNode":"fc77e61362f0a6e6","toSide":"top"},
		{"id":"36c3b012be0d569e","fromNode":"fc77e61362f0a6e6","fromSide":"bottom","toNode":"4e8571b128edcd3d","toSide":"top"},
		{"id":"bd340075506bb7b1","fromNode":"4e8571b128edcd3d","fromSide":"bottom","toNode":"a80c1e19841740be","toSide":"top"}
	]
}